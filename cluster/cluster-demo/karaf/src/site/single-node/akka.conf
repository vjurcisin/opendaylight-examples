
odl-cluster-data {
  akka {
    remote {
      netty.tcp {
        hostname = "127.0.0.1"
        port = 2550
      }
    }

    cluster {
      seed-nodes = ["akka.tcp://opendaylight-cluster-data@127.0.0.1:2550"]

      roles = [
        "member-1"
      ]

      pub-sub {
        # Actor name of the mediator actor, /system/distributedPubSubMediator
        name = distributedPubSubMediator

        # Start the mediator on members tagged with this role.
        # All members are used if undefined or empty.
        role = ""

        # The routing logic to use for 'Send'
        # Possible values: random, round-robin, broadcast
        routing-logic = random

        # How often the DistributedPubSubMediator should send out gossip information
        gossip-interval = 1s

        # Removed entries are pruned after this duration
        removed-time-to-live = 120s

        # Maximum number of elements to transfer in one message when synchronizing the registries.
        # Next chunk will be transferred in next round of gossip.
        max-delta-elements = 3000

        # The id of the dispatcher to use for DistributedPubSubMediator actors.
        # If not specified default dispatcher is used.
        # If specified you need to define the settings of the actual dispatcher.
        use-dispatcher = ""
      }

      singleton {
        # The actor name of the child singleton actor.
        singleton-name = "the-singleton"

        # Singleton among the nodes tagged with specified role.
        # If the role is not specified it's a singleton among all nodes in the cluster.
        role = ""

        # When a node is becoming oldest it sends hand-over request to previous oldest,
        # that might be leaving the cluster. This is retried with this interval until
        # the previous oldest confirms that the hand over has started or the previous
        # oldest member is removed from the cluster (+ akka.cluster.down-removal-margin).
        hand-over-retry-interval = 1s

        # The number of retries are derived from hand-over-retry-interval and
        # akka.cluster.down-removal-margin (or ClusterSingletonManagerSettings.removalMargin),
        # but it will never be less than this property.
        min-number-of-hand-over-retries = 10
      }

      singleton-proxy {
        # The actor name of the singleton actor that is started by the ClusterSingletonManager
        singleton-name = "the-singleton"

        # The role of the cluster nodes where the singleton can be deployed.
        # If the role is not specified then any node will do.
        role = ""

        # Interval at which the proxy will try to resolve the singleton instance.
        singleton-identification-interval = 1s

        # If the location of the singleton is unknown the proxy will buffer this
        # number of messages and deliver them when the singleton is identified.
        # When the buffer is full old messages will be dropped when new messages are
        # sent via the proxy.
        # Use 0 to disable buffering, i.e. messages will be dropped immediately if
        # the location of the singleton is unknown.
        # Maximum allowed buffer size is 10000.
        buffer-size = 1000
      }

    }
    
    persistence {
      # By default the snapshots/journal directories live in KARAF_HOME. You can choose to put it somewhere else by
      # modifying the following two properties. The directory location specified may be a relative or absolute path. 
      # The relative path is always relative to KARAF_HOME.

      # snapshot-store.local.dir = "target/snapshots"
      # journal.leveldb.dir = "target/journal"

      journal {
        leveldb {
          # Set native = off to use a Java-only implementation of leveldb.
          # Note that the Java-only version is not currently considered by Akka to be production quality.

          # native = off
        }
      }
    }

    extensions = ["akka.cluster.pubsub.DistributedPubSub"]

  }
}
